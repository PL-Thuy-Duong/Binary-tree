<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="label1.Text" xml:space="preserve">
    <value>Việc xóa một giá trị từ một cây nhị phân tìm kiếm (BST) 
có thể phức tạp hơn so với việc thêm giá trị. 
Quy trình xóa giá trị khỏi BST cần tuân theo các quy tắc sau:

Lý thuyết:

1.Bắt đầu từ nút gốc của cây.
2.So sánh giá trị cần xóa với giá trị của nút hiện tại.
Nếu giá trị cần xóa bằng giá trị của nút hiện tại, 
ta đã tìm thấy giá trị và cần xử lý trường hợp xóa.
Nếu giá trị cần xóa nhỏ hơn giá trị của nút hiện tại, 
di chuyển xuống nút con bên trái (nếu tồn tại) và quay lại bước 2.
Nếu giá trị cần xóa lớn hơn giá trị của nút hiện tại,
 di chuyển xuống nút con bên phải (nếu tồn tại) và quay lại bước 2.
3.Khi tìm thấy giá trị cần xóa tại một nút, xử lý trường hợp xóa:
a. Nếu nút đó không có hoặc chỉ có một nút con, xóa nút đó và
 thay thế nó bằng nút con (nếu có).
b. Nếu nút có cả hai nút con, hãy tìm nút thay thế để
 thay thế nút cần xóa (thường là nút trái nhất 
của cây con bên phải hoặc nút phải nhất của cây con bên trái), 
sau đó xóa nút thay thế và cập nhật giá trị của nút cần xóa.</value>
  </data>
  <data name="label2.Text" xml:space="preserve">
    <value>Mã giả (Pseudo-code) cho việc xóa giá trị từ cây nhị phân tìm kiếm:

function XoaKhoiCay(root, giaTriXoa):
    Nếu root là null:
        // Nếu cây rỗng, không cần thực hiện xóa
        Trả về root
    
    Nếu giaTriXoa nhỏ hơn giá trị của root:
        // Giá trị cần xóa nhỏ hơn giá trị của nút hiện tại
        // Gọi đệ quy để xóa giá trị từ cây con bên trái
        root.left = XoaKhoiCay(root.left, giaTriXoa)
    
    Ngược lại nếu giaTriXoa lớn hơn giá trị của root:
        // Giá trị cần xóa lớn hơn giá trị của nút hiện tại
        // Gọi đệ quy để xóa giá trị từ cây con bên phải
        root.right = XoaKhoiCay(root.right, giaTriXoa)
    
    Ngược lại:
        // Giá trị cần xóa bằng giá trị của nút hiện tại
        Nếu root không có nút con bên trái:
            // Trường hợp không có hoặc chỉ có nút con bên phải
            Trả về root.right
        
        Nếu root không có nút con bên phải:
            // Trường hợp chỉ có nút con bên trái
            Trả về root.left
        
        // Trường hợp có cả hai nút con
        Nút thay thế = TimNútTráiNhất(root.right)
        root.value = nút thay thế.value
        root.right = XoaKhoiCay(root.right, nút thay thế.value)
    
    Trả về root</value>
  </data>
</root>